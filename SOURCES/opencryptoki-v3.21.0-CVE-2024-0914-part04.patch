commit bc06acfb6c5e7a0fb4a384084b04404414360eaa
Author: Ingo Franzki <ifranzki@linux.ibm.com>
Date:   Tue Jan 16 10:01:20 2024 +0100

    testcases: Add RSA implicit rejection test cases
    
    Signed-off-by: Ingo Franzki <ifranzki@linux.ibm.com>

diff --git a/testcases/crypto/rsa.h b/testcases/crypto/rsa.h
index 7ed70262..6281d982 100644
--- a/testcases/crypto/rsa.h
+++ b/testcases/crypto/rsa.h
@@ -8977,3 +8977,817 @@ struct PUBLISHED_TEST_SUITE_INFO rsa_encdec_import_test_suites[] = {
         .mech = {CKM_RSA_X_509, 0, 0},
     },
 };
+
+struct RSA_PUBLISHED_TEST_VECTOR rsa_imp_rejection_tv[] = {
+    {                           // 0 - good case
+        .mod = {0xc8, 0xcc, 0x83, 0x97, 0x14, 0x09, 0x8d, 0xa5,
+                0x6c, 0xaa, 0x23, 0x64, 0x0f, 0x93, 0xdc, 0x89,
+                0x97, 0xc1, 0x63, 0x72, 0x96, 0x8f, 0xc1, 0xb0,
+                0xc6, 0xdf, 0x51, 0x13, 0xc1, 0xc9, 0x4e, 0x8b,
+                0x21, 0xe4, 0x8a, 0xd2, 0x29, 0x7e, 0x65, 0x41,
+                0x90, 0x11, 0xb4, 0xe6, 0xd8, 0xf5, 0xe7, 0x3b,
+                0x1b, 0x78, 0xb2, 0x57, 0x40, 0x03, 0x21, 0xd1,
+                0xef, 0x6b, 0x60, 0x2d, 0x4e, 0xc8, 0xce, 0x8d,
+                0x14, 0x1c, 0x94, 0x90, 0x5e, 0xb4, 0xad, 0x30,
+                0x66, 0x39, 0xa4, 0x92, 0x06, 0x53, 0x4b, 0x6e,
+                0x7f, 0x26, 0x07, 0x42, 0x3e, 0x97, 0xdf, 0xfd,
+                0x13, 0x3c, 0x88, 0xd7, 0x21, 0x39, 0x9d, 0xef,
+                0xbc, 0x7e, 0x96, 0xcc, 0xdc, 0xbd, 0x7f, 0x3a,
+                0xae, 0x1f, 0xe8, 0x92, 0x71, 0x2b, 0xfb, 0x49,
+                0x29, 0x81, 0x7d, 0x51, 0x16, 0x66, 0x44, 0x0a,
+                0x1f, 0xac, 0xb7, 0xa2, 0x08, 0xf5, 0xea, 0x16,
+                0x59, 0x10, 0xad, 0xd8, 0xa3, 0xf2, 0xd4, 0x97,
+                0x20, 0x23, 0x60, 0xcc, 0xb6, 0x32, 0x02, 0x4f,
+                0x0d, 0x07, 0x16, 0x9c, 0x19, 0x18, 0xf3, 0x16,
+                0xf7, 0x94, 0xb1, 0x43, 0xae, 0xf5, 0x4e, 0xc8,
+                0x75, 0x22, 0xa4, 0xc0, 0x29, 0x78, 0xf9, 0x68,
+                0x99, 0x80, 0xbf, 0xfb, 0xf6, 0x49, 0xc3, 0x07,
+                0xe8, 0x18, 0x19, 0xbf, 0xf8, 0x84, 0x09, 0x63,
+                0x8d, 0x48, 0xbd, 0x94, 0xbe, 0x15, 0x2b, 0x59,
+                0xff, 0x64, 0x9f, 0xa0, 0xbd, 0x62, 0x9d, 0x0f,
+                0xfa, 0x18, 0x13, 0xc3, 0xab, 0xf4, 0xb5, 0x6b,
+                0xd3, 0xc2, 0xea, 0x54, 0x65, 0xdf, 0xfa, 0x14,
+                0x58, 0x92, 0x92, 0xa9, 0xd8, 0xa2, 0x4a, 0xd2,
+                0x6b, 0xe7, 0xee, 0x05, 0x10, 0x74, 0x1b, 0x63,
+                0x82, 0xd4, 0x3c, 0x83, 0xd5, 0xbf, 0xa4, 0x0a,
+                0x46, 0x61, 0x3d, 0x06, 0x2b, 0xe4, 0x45, 0x51,
+                0x7d, 0xbc, 0xaf, 0x0c, 0xb4, 0xe1, 0xa7, 0x69},
+        .mod_len = 256,
+        .pub_exp = {0x01, 0x00, 0x01},
+        .pubexp_len = 3,
+        .priv_exp = {0x14, 0x55, 0x01, 0x0e, 0x0f, 0x2d, 0x58, 0x76,
+                     0x63, 0xa6, 0x66, 0xa6, 0xff, 0x1c, 0xcd, 0xbb,
+                     0xf0, 0xed, 0xd8, 0x10, 0x06, 0x46, 0xd0, 0x2a,
+                     0x02, 0x39, 0x22, 0x90, 0x89, 0x92, 0xc4, 0xad,
+                     0x39, 0xe5, 0x56, 0x59, 0x29, 0x72, 0x6e, 0xf6,
+                     0x50, 0x8c, 0x3a, 0x71, 0x15, 0x8e, 0xf0, 0xb6,
+                     0xff, 0x75, 0x1d, 0x39, 0xd0, 0x75, 0x80, 0xbb,
+                     0x2d, 0x2f, 0x06, 0x32, 0x10, 0x44, 0x2d, 0x06,
+                     0x03, 0xff, 0x50, 0xdb, 0xbd, 0x7b, 0x35, 0xfe,
+                     0x2c, 0x9b, 0xb1, 0x9a, 0x47, 0xa1, 0xaf, 0x85,
+                     0xa4, 0xc2, 0x49, 0x01, 0xe0, 0x2c, 0xa8, 0xb5,
+                     0x8b, 0x79, 0x19, 0xb2, 0x0e, 0xdf, 0x32, 0xaa,
+                     0xcf, 0xbf, 0x51, 0xad, 0xb4, 0xbc, 0x4b, 0x61,
+                     0xb9, 0xb7, 0xe9, 0x68, 0xca, 0xa4, 0xd5, 0x70,
+                     0xf7, 0x0e, 0xf1, 0x8d, 0x80, 0x63, 0x22, 0x88,
+                     0x93, 0xe4, 0x7d, 0x43, 0x9e, 0xfc, 0xa7, 0x93,
+                     0x25, 0x9b, 0xcf, 0x2c, 0xd1, 0x08, 0xa3, 0xd8,
+                     0x68, 0x8c, 0xdf, 0x07, 0x8e, 0x7a, 0xc7, 0x99,
+                     0x96, 0x9f, 0x23, 0x39, 0xd2, 0xc1, 0xf5, 0x22,
+                     0xb9, 0x69, 0x68, 0x46, 0x29, 0xa9, 0x33, 0xba,
+                     0xae, 0xc2, 0x68, 0x16, 0x25, 0xea, 0xb8, 0x4f,
+                     0x4e, 0x56, 0xf4, 0x44, 0x7e, 0x9d, 0x88, 0xfb,
+                     0x9a, 0x19, 0x9c, 0xf7, 0x10, 0x23, 0xe0, 0xe2,
+                     0x57, 0xb1, 0x44, 0x41, 0xb3, 0x3c, 0x84, 0xd3,
+                     0xbc, 0x67, 0xca, 0x80, 0x31, 0xd2, 0x61, 0x26,
+                     0x18, 0x10, 0x3a, 0x7a, 0x0a, 0x40, 0x84, 0x42,
+                     0x62, 0xf7, 0x5d, 0x88, 0x90, 0xcd, 0x61, 0x6e,
+                     0x51, 0xf9, 0x03, 0x54, 0x88, 0xfd, 0x6e, 0x09,
+                     0x9d, 0xe8, 0xff, 0x6d, 0x65, 0xa4, 0xff, 0x11,
+                     0x82, 0x54, 0x80, 0x7c, 0x9f, 0x58, 0xd2, 0xfb,
+                     0xba, 0x8b, 0xa1, 0x51, 0xdc, 0x8c, 0x68, 0xbe,
+                     0x34, 0x9c, 0x97, 0x7a, 0x20, 0x4e, 0x04, 0xc1},
+        .privexp_len = 256,
+        .prime1 = {0xf8, 0xf5, 0xad, 0x6b, 0xa8, 0x28, 0x93, 0x1b,
+                   0xea, 0x45, 0x9b, 0x8a, 0x3f, 0x6d, 0xc0, 0x41,
+                   0xd2, 0x34, 0x82, 0x40, 0x9c, 0x25, 0x71, 0xe9,
+                   0x63, 0xf3, 0x1f, 0x74, 0x86, 0x02, 0xa2, 0x56,
+                   0x37, 0x1b, 0x38, 0x83, 0xed, 0x45, 0x9e, 0xcf,
+                   0x97, 0x05, 0x26, 0x45, 0x9e, 0xdd, 0x16, 0xe0,
+                   0x55, 0x22, 0xf5, 0xa4, 0x5d, 0x94, 0x75, 0x1b,
+                   0x2e, 0xc2, 0xda, 0xf2, 0x72, 0xc7, 0xf8, 0x81,
+                   0x6a, 0x52, 0xc0, 0x0d, 0x18, 0x08, 0x01, 0x71,
+                   0x63, 0x4d, 0xa8, 0x99, 0xd7, 0x97, 0x32, 0x22,
+                   0xf5, 0x1b, 0x93, 0x76, 0x30, 0x54, 0x86, 0x96,
+                   0xa9, 0xf7, 0xd8, 0xc2, 0x4a, 0x59, 0x49, 0x7c,
+                   0x1e, 0xfc, 0xd4, 0x55, 0xcf, 0xb9, 0x7e, 0xe8,
+                   0x6d, 0x2b, 0x6d, 0x34, 0x97, 0x2b, 0x33, 0x2f,
+                   0xda, 0x30, 0x3f, 0x04, 0x99, 0x9b, 0x4e, 0xb6,
+                   0xb5, 0xcc, 0x0b, 0xb3, 0x3e, 0x77, 0x61, 0xdd},
+        .prime1_len = 128,
+        .prime2 = {0xce, 0x7a, 0x2e, 0x3b, 0x49, 0xa9, 0x0b, 0x96,
+                   0x33, 0x0a, 0x12, 0xdc, 0x68, 0x2b, 0xdf, 0xbd,
+                   0xfb, 0xae, 0x8d, 0xd6, 0xdc, 0x03, 0xb6, 0x14,
+                   0x7a, 0xef, 0xbd, 0x57, 0x57, 0x43, 0xf0, 0xf6,
+                   0xda, 0x4d, 0x86, 0x23, 0x50, 0x61, 0xb7, 0x1a,
+                   0xfd, 0x9c, 0xad, 0x2d, 0x34, 0x02, 0x5e, 0x56,
+                   0xac, 0x86, 0xb0, 0xf7, 0x74, 0x3e, 0xb3, 0x5e,
+                   0x1a, 0xcb, 0xca, 0x23, 0x78, 0x95, 0x42, 0x44,
+                   0x65, 0xb7, 0x06, 0xed, 0x22, 0x17, 0x5e, 0x57,
+                   0x18, 0xc8, 0xc7, 0x0b, 0x67, 0x03, 0xea, 0x8f,
+                   0x6b, 0x51, 0x0f, 0x94, 0x5b, 0xe4, 0x8e, 0x5a,
+                   0x36, 0xbb, 0x3c, 0x3c, 0x91, 0x73, 0x2b, 0x58,
+                   0x9d, 0xfc, 0x05, 0xd7, 0x2d, 0x80, 0x90, 0x31,
+                   0x94, 0x45, 0x2b, 0xda, 0x21, 0x34, 0x86, 0x47,
+                   0xec, 0x72, 0x94, 0x3f, 0x11, 0xa8, 0x46, 0xe6,
+                   0x2f, 0xae, 0xbe, 0x8e, 0xb5, 0x36, 0xb0, 0xfd},
+        .prime2_len = 128,
+        .exp1 = {0x76, 0xfe, 0x15, 0xf1, 0x8a, 0xe2, 0x39, 0xcd,
+                 0xf1, 0xdf, 0x6b, 0x44, 0x5c, 0xa4, 0xbc, 0x6b,
+                 0xb9, 0x68, 0xd7, 0x88, 0xc2, 0x19, 0x33, 0xa4,
+                 0xf5, 0xdc, 0xd2, 0x80, 0x03, 0x3d, 0x67, 0x12,
+                 0x06, 0x2c, 0xc0, 0x8a, 0x6d, 0xf2, 0x04, 0xc1,
+                 0xfb, 0xd0, 0xbe, 0x46, 0x30, 0x74, 0x43, 0xe6,
+                 0xdd, 0x4a, 0x64, 0x56, 0x37, 0x54, 0x29, 0xd4,
+                 0xe0, 0x38, 0xca, 0x25, 0x6f, 0xaf, 0x1c, 0x9b,
+                 0xde, 0x91, 0xc6, 0xb1, 0x7b, 0x76, 0xf8, 0x19,
+                 0x95, 0xf9, 0x1c, 0x48, 0xcb, 0xbe, 0xbc, 0x7b,
+                 0xf0, 0xe3, 0x49, 0x4c, 0x08, 0x35, 0x9e, 0x4e,
+                 0x8c, 0xd6, 0xa5, 0x87, 0xd7, 0xb9, 0x6d, 0x62,
+                 0x21, 0xfd, 0x7e, 0x0f, 0xb5, 0xc5, 0x57, 0x5f,
+                 0x08, 0x2e, 0xe5, 0x77, 0x69, 0x79, 0x80, 0x71,
+                 0xb2, 0xbb, 0xb4, 0xa3, 0x22, 0x38, 0x15, 0x1b,
+                 0x47, 0x31, 0x4b, 0xb6, 0x54, 0x79, 0x03, 0x11},
+        .exp1_len = 128,
+        .exp2 = {0x99, 0x88, 0x48, 0xb0, 0x55, 0x49, 0x9a, 0x10,
+                 0x09, 0xcb, 0xc7, 0xd2, 0x94, 0xb3, 0x6b, 0x1f,
+                 0xfd, 0xf2, 0x02, 0x0e, 0x6e, 0x73, 0x64, 0x05,
+                 0x3e, 0x94, 0xde, 0x1a, 0x00, 0x0d, 0xc9, 0x34,
+                 0x05, 0x87, 0xf7, 0xe2, 0x72, 0x76, 0xf6, 0x8c,
+                 0xdf, 0x60, 0x8d, 0x75, 0x3b, 0x63, 0x37, 0x7b,
+                 0x03, 0xb6, 0xf4, 0x08, 0x4d, 0x2c, 0x02, 0x7c,
+                 0x4b, 0x38, 0x96, 0x0a, 0x62, 0x33, 0xba, 0x9e,
+                 0xd9, 0x73, 0x8b, 0x76, 0xf1, 0x0e, 0xa7, 0x5b,
+                 0xe4, 0x56, 0x07, 0x8b, 0xf7, 0x01, 0xf6, 0x7c,
+                 0xc6, 0xb3, 0xf3, 0xfd, 0xc1, 0x86, 0xe6, 0x43,
+                 0x36, 0xc7, 0x6b, 0x37, 0x2e, 0x80, 0x91, 0x0e,
+                 0xc8, 0x0b, 0x0a, 0xdc, 0xc2, 0x3d, 0x02, 0xfb,
+                 0x9a, 0xe1, 0x04, 0x86, 0xa2, 0x82, 0x48, 0x07,
+                 0x5b, 0x4e, 0xa7, 0xe5, 0x6d, 0xdf, 0xcf, 0x38,
+                 0x82, 0xe4, 0x51, 0x56, 0x14, 0x71, 0xa2, 0x91},
+        .exp2_len = 128,
+        .coef = {0x64, 0x3b, 0xf7, 0x46, 0x42, 0x9f, 0x7d, 0x83,
+                 0x66, 0x7a, 0x06, 0x53, 0x02, 0x13, 0x47, 0xef,
+                 0xbf, 0xc0, 0x5e, 0x63, 0x51, 0xf8, 0x21, 0xa9,
+                 0xde, 0xbb, 0x60, 0xe0, 0xec, 0xcd, 0xe5, 0x00,
+                 0x5a, 0xd9, 0xe9, 0xec, 0x31, 0xe5, 0x58, 0xf7,
+                 0xe9, 0x2c, 0x29, 0x32, 0x8e, 0x74, 0x56, 0x9d,
+                 0x7c, 0xef, 0x7c, 0x74, 0xca, 0xbc, 0x2b, 0x35,
+                 0x5e, 0xd4, 0x01, 0xa1, 0xa0, 0x91, 0x4b, 0x4e,
+                 0x3c, 0xbb, 0x06, 0x48, 0x4e, 0x58, 0x19, 0x60,
+                 0x51, 0x16, 0x9e, 0xd1, 0x4c, 0xaa, 0x2e, 0xfa,
+                 0x6e, 0xa0, 0x44, 0xe0, 0x54, 0xd2, 0x61, 0x44,
+                 0xcc, 0x16, 0x29, 0xc5, 0x50, 0x10, 0x55, 0x8a,
+                 0x04, 0xe1, 0x33, 0xf4, 0x4b, 0x7c, 0x24, 0x4d,
+                 0xac, 0x25, 0xbf, 0x91, 0x3c, 0x57, 0xb8, 0x90,
+                 0xee, 0x49, 0xf5, 0x48, 0x25, 0x9c, 0xd6, 0x34,
+                 0x04, 0xfe, 0xf6, 0x85, 0x9d, 0xcf, 0x97, 0x5a},
+        .coef_len = 128,
+        // msg is encrypted message
+        .msg = {0x8b, 0xfe, 0x26, 0x4e, 0x85, 0xd3, 0xbd, 0xea,
+                0xa6, 0xb8, 0x85, 0x1b, 0x8e, 0x3b, 0x95, 0x6e,
+                0xe3, 0xd2, 0x26, 0xfd, 0x3f, 0x69, 0x06, 0x3a,
+                0x86, 0x88, 0x01, 0x73, 0xa2, 0x73, 0xd9, 0xf2,
+                0x83, 0xb2, 0xee, 0xbd, 0xd1, 0xed, 0x35, 0xf7,
+                0xe0, 0x2d, 0x91, 0xc5, 0x71, 0x98, 0x1b, 0x67,
+                0x37, 0xd5, 0x32, 0x0b, 0xd8, 0x39, 0x6b, 0x0f,
+                0x3a, 0xd5, 0xb0, 0x19, 0xda, 0xec, 0x1b, 0x0a,
+                0xab, 0x3c, 0xbb, 0xc0, 0x26, 0x39, 0x5f, 0x4f,
+                0xd1, 0x4f, 0x13, 0x67, 0x3f, 0x2d, 0xfc, 0x81,
+                0xf9, 0xb6, 0x60, 0xec, 0x26, 0xac, 0x38, 0x1e,
+                0x6d, 0xb3, 0x29, 0x9b, 0x4e, 0x46, 0x0b, 0x43,
+                0xfa, 0xb9, 0x95, 0x5d, 0xf2, 0xb3, 0xcf, 0xaa,
+                0x20, 0xe9, 0x00, 0xe1, 0x9c, 0x85, 0x62, 0x38,
+                0xfd, 0x37, 0x18, 0x99, 0xc2, 0xbf, 0x2c, 0xe8,
+                0xc8, 0x68, 0xb7, 0x67, 0x54, 0xe5, 0xdb, 0x3b,
+                0x03, 0x65, 0x33, 0xfd, 0x60, 0x37, 0x46, 0xbe,
+                0x13, 0xc1, 0x0d, 0x4e, 0x3e, 0x60, 0x22, 0xeb,
+                0xc9, 0x05, 0xd2, 0x0c, 0x2a, 0x7f, 0x32, 0xb2,
+                0x15, 0xa4, 0xcd, 0x53, 0xb3, 0xf4, 0x4c, 0xa1,
+                0xc3, 0x27, 0xd2, 0xc2, 0xb6, 0x51, 0x14, 0x58,
+                0x21, 0xc0, 0x83, 0x96, 0xc8, 0x90, 0x71, 0xf6,
+                0x65, 0x34, 0x9c, 0x25, 0xe4, 0x4d, 0x27, 0x33,
+                0xcd, 0x93, 0x05, 0x98, 0x5c, 0xee, 0xf6, 0x43,
+                0x0c, 0x3c, 0xf5, 0x7a, 0xf5, 0xfa, 0x22, 0x40,
+                0x89, 0x22, 0x12, 0x18, 0xfa, 0x34, 0x73, 0x7c,
+                0x79, 0xc4, 0x46, 0xd2, 0x8a, 0x94, 0xc4, 0x1c,
+                0x96, 0xe4, 0xe9, 0x2a, 0xc5, 0x3f, 0xbc, 0xf3,
+                0x84, 0xde, 0xa8, 0x41, 0x9e, 0xa0, 0x89, 0xf8,
+                0x78, 0x44, 0x45, 0xa4, 0x92, 0xc8, 0x12, 0xeb,
+                0x0d, 0x40, 0x94, 0x67, 0xf7, 0x5a, 0xfd, 0x7d,
+                0x4d, 0x10, 0x78, 0x88, 0x62, 0x05, 0xa0, 0x66},
+        .msg_len = 256,
+        // sig is decrypted message
+        .sig = { 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70,
+                 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f,
+                 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d,
+                 0x65, 0x74},
+        .sig_len = 26,
+    },
+    {                           // 1 - bad, empty input
+        .mod = {0xc8, 0xcc, 0x83, 0x97, 0x14, 0x09, 0x8d, 0xa5,
+                0x6c, 0xaa, 0x23, 0x64, 0x0f, 0x93, 0xdc, 0x89,
+                0x97, 0xc1, 0x63, 0x72, 0x96, 0x8f, 0xc1, 0xb0,
+                0xc6, 0xdf, 0x51, 0x13, 0xc1, 0xc9, 0x4e, 0x8b,
+                0x21, 0xe4, 0x8a, 0xd2, 0x29, 0x7e, 0x65, 0x41,
+                0x90, 0x11, 0xb4, 0xe6, 0xd8, 0xf5, 0xe7, 0x3b,
+                0x1b, 0x78, 0xb2, 0x57, 0x40, 0x03, 0x21, 0xd1,
+                0xef, 0x6b, 0x60, 0x2d, 0x4e, 0xc8, 0xce, 0x8d,
+                0x14, 0x1c, 0x94, 0x90, 0x5e, 0xb4, 0xad, 0x30,
+                0x66, 0x39, 0xa4, 0x92, 0x06, 0x53, 0x4b, 0x6e,
+                0x7f, 0x26, 0x07, 0x42, 0x3e, 0x97, 0xdf, 0xfd,
+                0x13, 0x3c, 0x88, 0xd7, 0x21, 0x39, 0x9d, 0xef,
+                0xbc, 0x7e, 0x96, 0xcc, 0xdc, 0xbd, 0x7f, 0x3a,
+                0xae, 0x1f, 0xe8, 0x92, 0x71, 0x2b, 0xfb, 0x49,
+                0x29, 0x81, 0x7d, 0x51, 0x16, 0x66, 0x44, 0x0a,
+                0x1f, 0xac, 0xb7, 0xa2, 0x08, 0xf5, 0xea, 0x16,
+                0x59, 0x10, 0xad, 0xd8, 0xa3, 0xf2, 0xd4, 0x97,
+                0x20, 0x23, 0x60, 0xcc, 0xb6, 0x32, 0x02, 0x4f,
+                0x0d, 0x07, 0x16, 0x9c, 0x19, 0x18, 0xf3, 0x16,
+                0xf7, 0x94, 0xb1, 0x43, 0xae, 0xf5, 0x4e, 0xc8,
+                0x75, 0x22, 0xa4, 0xc0, 0x29, 0x78, 0xf9, 0x68,
+                0x99, 0x80, 0xbf, 0xfb, 0xf6, 0x49, 0xc3, 0x07,
+                0xe8, 0x18, 0x19, 0xbf, 0xf8, 0x84, 0x09, 0x63,
+                0x8d, 0x48, 0xbd, 0x94, 0xbe, 0x15, 0x2b, 0x59,
+                0xff, 0x64, 0x9f, 0xa0, 0xbd, 0x62, 0x9d, 0x0f,
+                0xfa, 0x18, 0x13, 0xc3, 0xab, 0xf4, 0xb5, 0x6b,
+                0xd3, 0xc2, 0xea, 0x54, 0x65, 0xdf, 0xfa, 0x14,
+                0x58, 0x92, 0x92, 0xa9, 0xd8, 0xa2, 0x4a, 0xd2,
+                0x6b, 0xe7, 0xee, 0x05, 0x10, 0x74, 0x1b, 0x63,
+                0x82, 0xd4, 0x3c, 0x83, 0xd5, 0xbf, 0xa4, 0x0a,
+                0x46, 0x61, 0x3d, 0x06, 0x2b, 0xe4, 0x45, 0x51,
+                0x7d, 0xbc, 0xaf, 0x0c, 0xb4, 0xe1, 0xa7, 0x69},
+        .mod_len = 256,
+        .pub_exp = {0x01, 0x00, 0x01},
+        .pubexp_len = 3,
+        .priv_exp = {0x14, 0x55, 0x01, 0x0e, 0x0f, 0x2d, 0x58, 0x76,
+                     0x63, 0xa6, 0x66, 0xa6, 0xff, 0x1c, 0xcd, 0xbb,
+                     0xf0, 0xed, 0xd8, 0x10, 0x06, 0x46, 0xd0, 0x2a,
+                     0x02, 0x39, 0x22, 0x90, 0x89, 0x92, 0xc4, 0xad,
+                     0x39, 0xe5, 0x56, 0x59, 0x29, 0x72, 0x6e, 0xf6,
+                     0x50, 0x8c, 0x3a, 0x71, 0x15, 0x8e, 0xf0, 0xb6,
+                     0xff, 0x75, 0x1d, 0x39, 0xd0, 0x75, 0x80, 0xbb,
+                     0x2d, 0x2f, 0x06, 0x32, 0x10, 0x44, 0x2d, 0x06,
+                     0x03, 0xff, 0x50, 0xdb, 0xbd, 0x7b, 0x35, 0xfe,
+                     0x2c, 0x9b, 0xb1, 0x9a, 0x47, 0xa1, 0xaf, 0x85,
+                     0xa4, 0xc2, 0x49, 0x01, 0xe0, 0x2c, 0xa8, 0xb5,
+                     0x8b, 0x79, 0x19, 0xb2, 0x0e, 0xdf, 0x32, 0xaa,
+                     0xcf, 0xbf, 0x51, 0xad, 0xb4, 0xbc, 0x4b, 0x61,
+                     0xb9, 0xb7, 0xe9, 0x68, 0xca, 0xa4, 0xd5, 0x70,
+                     0xf7, 0x0e, 0xf1, 0x8d, 0x80, 0x63, 0x22, 0x88,
+                     0x93, 0xe4, 0x7d, 0x43, 0x9e, 0xfc, 0xa7, 0x93,
+                     0x25, 0x9b, 0xcf, 0x2c, 0xd1, 0x08, 0xa3, 0xd8,
+                     0x68, 0x8c, 0xdf, 0x07, 0x8e, 0x7a, 0xc7, 0x99,
+                     0x96, 0x9f, 0x23, 0x39, 0xd2, 0xc1, 0xf5, 0x22,
+                     0xb9, 0x69, 0x68, 0x46, 0x29, 0xa9, 0x33, 0xba,
+                     0xae, 0xc2, 0x68, 0x16, 0x25, 0xea, 0xb8, 0x4f,
+                     0x4e, 0x56, 0xf4, 0x44, 0x7e, 0x9d, 0x88, 0xfb,
+                     0x9a, 0x19, 0x9c, 0xf7, 0x10, 0x23, 0xe0, 0xe2,
+                     0x57, 0xb1, 0x44, 0x41, 0xb3, 0x3c, 0x84, 0xd3,
+                     0xbc, 0x67, 0xca, 0x80, 0x31, 0xd2, 0x61, 0x26,
+                     0x18, 0x10, 0x3a, 0x7a, 0x0a, 0x40, 0x84, 0x42,
+                     0x62, 0xf7, 0x5d, 0x88, 0x90, 0xcd, 0x61, 0x6e,
+                     0x51, 0xf9, 0x03, 0x54, 0x88, 0xfd, 0x6e, 0x09,
+                     0x9d, 0xe8, 0xff, 0x6d, 0x65, 0xa4, 0xff, 0x11,
+                     0x82, 0x54, 0x80, 0x7c, 0x9f, 0x58, 0xd2, 0xfb,
+                     0xba, 0x8b, 0xa1, 0x51, 0xdc, 0x8c, 0x68, 0xbe,
+                     0x34, 0x9c, 0x97, 0x7a, 0x20, 0x4e, 0x04, 0xc1},
+        .privexp_len = 256,
+        .prime1 = {0xf8, 0xf5, 0xad, 0x6b, 0xa8, 0x28, 0x93, 0x1b,
+                   0xea, 0x45, 0x9b, 0x8a, 0x3f, 0x6d, 0xc0, 0x41,
+                   0xd2, 0x34, 0x82, 0x40, 0x9c, 0x25, 0x71, 0xe9,
+                   0x63, 0xf3, 0x1f, 0x74, 0x86, 0x02, 0xa2, 0x56,
+                   0x37, 0x1b, 0x38, 0x83, 0xed, 0x45, 0x9e, 0xcf,
+                   0x97, 0x05, 0x26, 0x45, 0x9e, 0xdd, 0x16, 0xe0,
+                   0x55, 0x22, 0xf5, 0xa4, 0x5d, 0x94, 0x75, 0x1b,
+                   0x2e, 0xc2, 0xda, 0xf2, 0x72, 0xc7, 0xf8, 0x81,
+                   0x6a, 0x52, 0xc0, 0x0d, 0x18, 0x08, 0x01, 0x71,
+                   0x63, 0x4d, 0xa8, 0x99, 0xd7, 0x97, 0x32, 0x22,
+                   0xf5, 0x1b, 0x93, 0x76, 0x30, 0x54, 0x86, 0x96,
+                   0xa9, 0xf7, 0xd8, 0xc2, 0x4a, 0x59, 0x49, 0x7c,
+                   0x1e, 0xfc, 0xd4, 0x55, 0xcf, 0xb9, 0x7e, 0xe8,
+                   0x6d, 0x2b, 0x6d, 0x34, 0x97, 0x2b, 0x33, 0x2f,
+                   0xda, 0x30, 0x3f, 0x04, 0x99, 0x9b, 0x4e, 0xb6,
+                   0xb5, 0xcc, 0x0b, 0xb3, 0x3e, 0x77, 0x61, 0xdd},
+        .prime1_len = 128,
+        .prime2 = {0xce, 0x7a, 0x2e, 0x3b, 0x49, 0xa9, 0x0b, 0x96,
+                   0x33, 0x0a, 0x12, 0xdc, 0x68, 0x2b, 0xdf, 0xbd,
+                   0xfb, 0xae, 0x8d, 0xd6, 0xdc, 0x03, 0xb6, 0x14,
+                   0x7a, 0xef, 0xbd, 0x57, 0x57, 0x43, 0xf0, 0xf6,
+                   0xda, 0x4d, 0x86, 0x23, 0x50, 0x61, 0xb7, 0x1a,
+                   0xfd, 0x9c, 0xad, 0x2d, 0x34, 0x02, 0x5e, 0x56,
+                   0xac, 0x86, 0xb0, 0xf7, 0x74, 0x3e, 0xb3, 0x5e,
+                   0x1a, 0xcb, 0xca, 0x23, 0x78, 0x95, 0x42, 0x44,
+                   0x65, 0xb7, 0x06, 0xed, 0x22, 0x17, 0x5e, 0x57,
+                   0x18, 0xc8, 0xc7, 0x0b, 0x67, 0x03, 0xea, 0x8f,
+                   0x6b, 0x51, 0x0f, 0x94, 0x5b, 0xe4, 0x8e, 0x5a,
+                   0x36, 0xbb, 0x3c, 0x3c, 0x91, 0x73, 0x2b, 0x58,
+                   0x9d, 0xfc, 0x05, 0xd7, 0x2d, 0x80, 0x90, 0x31,
+                   0x94, 0x45, 0x2b, 0xda, 0x21, 0x34, 0x86, 0x47,
+                   0xec, 0x72, 0x94, 0x3f, 0x11, 0xa8, 0x46, 0xe6,
+                   0x2f, 0xae, 0xbe, 0x8e, 0xb5, 0x36, 0xb0, 0xfd},
+        .prime2_len = 128,
+        .exp1 = {0x76, 0xfe, 0x15, 0xf1, 0x8a, 0xe2, 0x39, 0xcd,
+                 0xf1, 0xdf, 0x6b, 0x44, 0x5c, 0xa4, 0xbc, 0x6b,
+                 0xb9, 0x68, 0xd7, 0x88, 0xc2, 0x19, 0x33, 0xa4,
+                 0xf5, 0xdc, 0xd2, 0x80, 0x03, 0x3d, 0x67, 0x12,
+                 0x06, 0x2c, 0xc0, 0x8a, 0x6d, 0xf2, 0x04, 0xc1,
+                 0xfb, 0xd0, 0xbe, 0x46, 0x30, 0x74, 0x43, 0xe6,
+                 0xdd, 0x4a, 0x64, 0x56, 0x37, 0x54, 0x29, 0xd4,
+                 0xe0, 0x38, 0xca, 0x25, 0x6f, 0xaf, 0x1c, 0x9b,
+                 0xde, 0x91, 0xc6, 0xb1, 0x7b, 0x76, 0xf8, 0x19,
+                 0x95, 0xf9, 0x1c, 0x48, 0xcb, 0xbe, 0xbc, 0x7b,
+                 0xf0, 0xe3, 0x49, 0x4c, 0x08, 0x35, 0x9e, 0x4e,
+                 0x8c, 0xd6, 0xa5, 0x87, 0xd7, 0xb9, 0x6d, 0x62,
+                 0x21, 0xfd, 0x7e, 0x0f, 0xb5, 0xc5, 0x57, 0x5f,
+                 0x08, 0x2e, 0xe5, 0x77, 0x69, 0x79, 0x80, 0x71,
+                 0xb2, 0xbb, 0xb4, 0xa3, 0x22, 0x38, 0x15, 0x1b,
+                 0x47, 0x31, 0x4b, 0xb6, 0x54, 0x79, 0x03, 0x11},
+        .exp1_len = 128,
+        .exp2 = {0x99, 0x88, 0x48, 0xb0, 0x55, 0x49, 0x9a, 0x10,
+                 0x09, 0xcb, 0xc7, 0xd2, 0x94, 0xb3, 0x6b, 0x1f,
+                 0xfd, 0xf2, 0x02, 0x0e, 0x6e, 0x73, 0x64, 0x05,
+                 0x3e, 0x94, 0xde, 0x1a, 0x00, 0x0d, 0xc9, 0x34,
+                 0x05, 0x87, 0xf7, 0xe2, 0x72, 0x76, 0xf6, 0x8c,
+                 0xdf, 0x60, 0x8d, 0x75, 0x3b, 0x63, 0x37, 0x7b,
+                 0x03, 0xb6, 0xf4, 0x08, 0x4d, 0x2c, 0x02, 0x7c,
+                 0x4b, 0x38, 0x96, 0x0a, 0x62, 0x33, 0xba, 0x9e,
+                 0xd9, 0x73, 0x8b, 0x76, 0xf1, 0x0e, 0xa7, 0x5b,
+                 0xe4, 0x56, 0x07, 0x8b, 0xf7, 0x01, 0xf6, 0x7c,
+                 0xc6, 0xb3, 0xf3, 0xfd, 0xc1, 0x86, 0xe6, 0x43,
+                 0x36, 0xc7, 0x6b, 0x37, 0x2e, 0x80, 0x91, 0x0e,
+                 0xc8, 0x0b, 0x0a, 0xdc, 0xc2, 0x3d, 0x02, 0xfb,
+                 0x9a, 0xe1, 0x04, 0x86, 0xa2, 0x82, 0x48, 0x07,
+                 0x5b, 0x4e, 0xa7, 0xe5, 0x6d, 0xdf, 0xcf, 0x38,
+                 0x82, 0xe4, 0x51, 0x56, 0x14, 0x71, 0xa2, 0x91},
+        .exp2_len = 128,
+        .coef = {0x64, 0x3b, 0xf7, 0x46, 0x42, 0x9f, 0x7d, 0x83,
+                 0x66, 0x7a, 0x06, 0x53, 0x02, 0x13, 0x47, 0xef,
+                 0xbf, 0xc0, 0x5e, 0x63, 0x51, 0xf8, 0x21, 0xa9,
+                 0xde, 0xbb, 0x60, 0xe0, 0xec, 0xcd, 0xe5, 0x00,
+                 0x5a, 0xd9, 0xe9, 0xec, 0x31, 0xe5, 0x58, 0xf7,
+                 0xe9, 0x2c, 0x29, 0x32, 0x8e, 0x74, 0x56, 0x9d,
+                 0x7c, 0xef, 0x7c, 0x74, 0xca, 0xbc, 0x2b, 0x35,
+                 0x5e, 0xd4, 0x01, 0xa1, 0xa0, 0x91, 0x4b, 0x4e,
+                 0x3c, 0xbb, 0x06, 0x48, 0x4e, 0x58, 0x19, 0x60,
+                 0x51, 0x16, 0x9e, 0xd1, 0x4c, 0xaa, 0x2e, 0xfa,
+                 0x6e, 0xa0, 0x44, 0xe0, 0x54, 0xd2, 0x61, 0x44,
+                 0xcc, 0x16, 0x29, 0xc5, 0x50, 0x10, 0x55, 0x8a,
+                 0x04, 0xe1, 0x33, 0xf4, 0x4b, 0x7c, 0x24, 0x4d,
+                 0xac, 0x25, 0xbf, 0x91, 0x3c, 0x57, 0xb8, 0x90,
+                 0xee, 0x49, 0xf5, 0x48, 0x25, 0x9c, 0xd6, 0x34,
+                 0x04, 0xfe, 0xf6, 0x85, 0x9d, 0xcf, 0x97, 0x5a},
+        .coef_len = 128,
+        // msg is encrypted message
+        .msg = {0x20, 0xaa, 0xa8, 0xad, 0xbb, 0xc5, 0x93, 0xa9,
+                0x24, 0xba, 0x1c, 0x5c, 0x79, 0x90, 0xb5, 0xc2,
+                0x24, 0x2a, 0xe4, 0xb9, 0x9d, 0x0f, 0xe6, 0x36,
+                0xa1, 0x9a, 0x4c, 0xf7, 0x54, 0xed, 0xbc, 0xee,
+                0x77, 0x4e, 0x47, 0x2f, 0xe0, 0x28, 0x16, 0x0e,
+                0xd4, 0x26, 0x34, 0xf8, 0x86, 0x49, 0x00, 0xcb,
+                0x51, 0x40, 0x06, 0xda, 0x64, 0x2c, 0xae, 0x6a,
+                0xe8, 0xc7, 0xd0, 0x87, 0xca, 0xeb, 0xcf, 0xa6,
+                0xda, 0xd1, 0x55, 0x13, 0x01, 0xe1, 0x30, 0x34,
+                0x49, 0x89, 0xa1, 0xd4, 0x62, 0xd4, 0x16, 0x45,
+                0x05, 0xf6, 0x39, 0x39, 0x33, 0x45, 0x0c, 0x67,
+                0xbc, 0x6d, 0x39, 0xd8, 0xf5, 0x16, 0x09, 0x07,
+                0xca, 0xbc, 0x25, 0x1b, 0x73, 0x79, 0x25, 0xa1,
+                0xcf, 0x21, 0xe5, 0xc6, 0xaa, 0x57, 0x81, 0xb7,
+                0x76, 0x9f, 0x6a, 0x2a, 0x58, 0x3d, 0x97, 0xcc,
+                0xe0, 0x08, 0xc0, 0xf8, 0xb6, 0xad, 0xd5, 0xf0,
+                0xb2, 0xbd, 0x80, 0xbe, 0xe6, 0x02, 0x37, 0xaa,
+                0x39, 0xbb, 0x20, 0x71, 0x9f, 0xe7, 0x57, 0x49,
+                0xf4, 0xbc, 0x4e, 0x42, 0x46, 0x6e, 0xf5, 0xa8,
+                0x61, 0xae, 0x3a, 0x92, 0x39, 0x5c, 0x7d, 0x85,
+                0x8d, 0x43, 0x0b, 0xfe, 0x38, 0x04, 0x0f, 0x44,
+                0x5e, 0xa9, 0x3f, 0xa2, 0x95, 0x8b, 0x50, 0x35,
+                0x39, 0x80, 0x0f, 0xfa, 0x5c, 0xe5, 0xf8, 0xcf,
+                0x51, 0xfa, 0x81, 0x71, 0xa9, 0x1f, 0x36, 0xcb,
+                0x4f, 0x45, 0x75, 0xe8, 0xde, 0x6b, 0x4d, 0x3f,
+                0x09, 0x6e, 0xe1, 0x40, 0xb9, 0x38, 0xfd, 0x2f,
+                0x50, 0xee, 0x13, 0xf0, 0xd0, 0x50, 0x22, 0x2e,
+                0x2a, 0x72, 0xb0, 0xa3, 0x06, 0x9f, 0xf3, 0xa6,
+                0x73, 0x8e, 0x82, 0xc8, 0x70, 0x90, 0xca, 0xa5,
+                0xae, 0xd4, 0xfc, 0xbe, 0x88, 0x2c, 0x49, 0x64,
+                0x6a, 0xa2, 0x50, 0xb9, 0x8f, 0x12, 0xf8, 0x3c,
+                0x8d, 0x52, 0x81, 0x13, 0x61, 0x4a, 0x29, 0xe7},
+        .msg_len = 256,
+        // sig is decrypted message
+        .sig = { 0x00 },
+        .sig_len = 0,
+    },
+    {                           // 2 - bad, max
+        .mod = {0xc8, 0xcc, 0x83, 0x97, 0x14, 0x09, 0x8d, 0xa5,
+                0x6c, 0xaa, 0x23, 0x64, 0x0f, 0x93, 0xdc, 0x89,
+                0x97, 0xc1, 0x63, 0x72, 0x96, 0x8f, 0xc1, 0xb0,
+                0xc6, 0xdf, 0x51, 0x13, 0xc1, 0xc9, 0x4e, 0x8b,
+                0x21, 0xe4, 0x8a, 0xd2, 0x29, 0x7e, 0x65, 0x41,
+                0x90, 0x11, 0xb4, 0xe6, 0xd8, 0xf5, 0xe7, 0x3b,
+                0x1b, 0x78, 0xb2, 0x57, 0x40, 0x03, 0x21, 0xd1,
+                0xef, 0x6b, 0x60, 0x2d, 0x4e, 0xc8, 0xce, 0x8d,
+                0x14, 0x1c, 0x94, 0x90, 0x5e, 0xb4, 0xad, 0x30,
+                0x66, 0x39, 0xa4, 0x92, 0x06, 0x53, 0x4b, 0x6e,
+                0x7f, 0x26, 0x07, 0x42, 0x3e, 0x97, 0xdf, 0xfd,
+                0x13, 0x3c, 0x88, 0xd7, 0x21, 0x39, 0x9d, 0xef,
+                0xbc, 0x7e, 0x96, 0xcc, 0xdc, 0xbd, 0x7f, 0x3a,
+                0xae, 0x1f, 0xe8, 0x92, 0x71, 0x2b, 0xfb, 0x49,
+                0x29, 0x81, 0x7d, 0x51, 0x16, 0x66, 0x44, 0x0a,
+                0x1f, 0xac, 0xb7, 0xa2, 0x08, 0xf5, 0xea, 0x16,
+                0x59, 0x10, 0xad, 0xd8, 0xa3, 0xf2, 0xd4, 0x97,
+                0x20, 0x23, 0x60, 0xcc, 0xb6, 0x32, 0x02, 0x4f,
+                0x0d, 0x07, 0x16, 0x9c, 0x19, 0x18, 0xf3, 0x16,
+                0xf7, 0x94, 0xb1, 0x43, 0xae, 0xf5, 0x4e, 0xc8,
+                0x75, 0x22, 0xa4, 0xc0, 0x29, 0x78, 0xf9, 0x68,
+                0x99, 0x80, 0xbf, 0xfb, 0xf6, 0x49, 0xc3, 0x07,
+                0xe8, 0x18, 0x19, 0xbf, 0xf8, 0x84, 0x09, 0x63,
+                0x8d, 0x48, 0xbd, 0x94, 0xbe, 0x15, 0x2b, 0x59,
+                0xff, 0x64, 0x9f, 0xa0, 0xbd, 0x62, 0x9d, 0x0f,
+                0xfa, 0x18, 0x13, 0xc3, 0xab, 0xf4, 0xb5, 0x6b,
+                0xd3, 0xc2, 0xea, 0x54, 0x65, 0xdf, 0xfa, 0x14,
+                0x58, 0x92, 0x92, 0xa9, 0xd8, 0xa2, 0x4a, 0xd2,
+                0x6b, 0xe7, 0xee, 0x05, 0x10, 0x74, 0x1b, 0x63,
+                0x82, 0xd4, 0x3c, 0x83, 0xd5, 0xbf, 0xa4, 0x0a,
+                0x46, 0x61, 0x3d, 0x06, 0x2b, 0xe4, 0x45, 0x51,
+                0x7d, 0xbc, 0xaf, 0x0c, 0xb4, 0xe1, 0xa7, 0x69},
+        .mod_len = 256,
+        .pub_exp = {0x01, 0x00, 0x01},
+        .pubexp_len = 3,
+        .priv_exp = {0x14, 0x55, 0x01, 0x0e, 0x0f, 0x2d, 0x58, 0x76,
+                     0x63, 0xa6, 0x66, 0xa6, 0xff, 0x1c, 0xcd, 0xbb,
+                     0xf0, 0xed, 0xd8, 0x10, 0x06, 0x46, 0xd0, 0x2a,
+                     0x02, 0x39, 0x22, 0x90, 0x89, 0x92, 0xc4, 0xad,
+                     0x39, 0xe5, 0x56, 0x59, 0x29, 0x72, 0x6e, 0xf6,
+                     0x50, 0x8c, 0x3a, 0x71, 0x15, 0x8e, 0xf0, 0xb6,
+                     0xff, 0x75, 0x1d, 0x39, 0xd0, 0x75, 0x80, 0xbb,
+                     0x2d, 0x2f, 0x06, 0x32, 0x10, 0x44, 0x2d, 0x06,
+                     0x03, 0xff, 0x50, 0xdb, 0xbd, 0x7b, 0x35, 0xfe,
+                     0x2c, 0x9b, 0xb1, 0x9a, 0x47, 0xa1, 0xaf, 0x85,
+                     0xa4, 0xc2, 0x49, 0x01, 0xe0, 0x2c, 0xa8, 0xb5,
+                     0x8b, 0x79, 0x19, 0xb2, 0x0e, 0xdf, 0x32, 0xaa,
+                     0xcf, 0xbf, 0x51, 0xad, 0xb4, 0xbc, 0x4b, 0x61,
+                     0xb9, 0xb7, 0xe9, 0x68, 0xca, 0xa4, 0xd5, 0x70,
+                     0xf7, 0x0e, 0xf1, 0x8d, 0x80, 0x63, 0x22, 0x88,
+                     0x93, 0xe4, 0x7d, 0x43, 0x9e, 0xfc, 0xa7, 0x93,
+                     0x25, 0x9b, 0xcf, 0x2c, 0xd1, 0x08, 0xa3, 0xd8,
+                     0x68, 0x8c, 0xdf, 0x07, 0x8e, 0x7a, 0xc7, 0x99,
+                     0x96, 0x9f, 0x23, 0x39, 0xd2, 0xc1, 0xf5, 0x22,
+                     0xb9, 0x69, 0x68, 0x46, 0x29, 0xa9, 0x33, 0xba,
+                     0xae, 0xc2, 0x68, 0x16, 0x25, 0xea, 0xb8, 0x4f,
+                     0x4e, 0x56, 0xf4, 0x44, 0x7e, 0x9d, 0x88, 0xfb,
+                     0x9a, 0x19, 0x9c, 0xf7, 0x10, 0x23, 0xe0, 0xe2,
+                     0x57, 0xb1, 0x44, 0x41, 0xb3, 0x3c, 0x84, 0xd3,
+                     0xbc, 0x67, 0xca, 0x80, 0x31, 0xd2, 0x61, 0x26,
+                     0x18, 0x10, 0x3a, 0x7a, 0x0a, 0x40, 0x84, 0x42,
+                     0x62, 0xf7, 0x5d, 0x88, 0x90, 0xcd, 0x61, 0x6e,
+                     0x51, 0xf9, 0x03, 0x54, 0x88, 0xfd, 0x6e, 0x09,
+                     0x9d, 0xe8, 0xff, 0x6d, 0x65, 0xa4, 0xff, 0x11,
+                     0x82, 0x54, 0x80, 0x7c, 0x9f, 0x58, 0xd2, 0xfb,
+                     0xba, 0x8b, 0xa1, 0x51, 0xdc, 0x8c, 0x68, 0xbe,
+                     0x34, 0x9c, 0x97, 0x7a, 0x20, 0x4e, 0x04, 0xc1},
+        .privexp_len = 256,
+        .prime1 = {0xf8, 0xf5, 0xad, 0x6b, 0xa8, 0x28, 0x93, 0x1b,
+                   0xea, 0x45, 0x9b, 0x8a, 0x3f, 0x6d, 0xc0, 0x41,
+                   0xd2, 0x34, 0x82, 0x40, 0x9c, 0x25, 0x71, 0xe9,
+                   0x63, 0xf3, 0x1f, 0x74, 0x86, 0x02, 0xa2, 0x56,
+                   0x37, 0x1b, 0x38, 0x83, 0xed, 0x45, 0x9e, 0xcf,
+                   0x97, 0x05, 0x26, 0x45, 0x9e, 0xdd, 0x16, 0xe0,
+                   0x55, 0x22, 0xf5, 0xa4, 0x5d, 0x94, 0x75, 0x1b,
+                   0x2e, 0xc2, 0xda, 0xf2, 0x72, 0xc7, 0xf8, 0x81,
+                   0x6a, 0x52, 0xc0, 0x0d, 0x18, 0x08, 0x01, 0x71,
+                   0x63, 0x4d, 0xa8, 0x99, 0xd7, 0x97, 0x32, 0x22,
+                   0xf5, 0x1b, 0x93, 0x76, 0x30, 0x54, 0x86, 0x96,
+                   0xa9, 0xf7, 0xd8, 0xc2, 0x4a, 0x59, 0x49, 0x7c,
+                   0x1e, 0xfc, 0xd4, 0x55, 0xcf, 0xb9, 0x7e, 0xe8,
+                   0x6d, 0x2b, 0x6d, 0x34, 0x97, 0x2b, 0x33, 0x2f,
+                   0xda, 0x30, 0x3f, 0x04, 0x99, 0x9b, 0x4e, 0xb6,
+                   0xb5, 0xcc, 0x0b, 0xb3, 0x3e, 0x77, 0x61, 0xdd},
+        .prime1_len = 128,
+        .prime2 = {0xce, 0x7a, 0x2e, 0x3b, 0x49, 0xa9, 0x0b, 0x96,
+                   0x33, 0x0a, 0x12, 0xdc, 0x68, 0x2b, 0xdf, 0xbd,
+                   0xfb, 0xae, 0x8d, 0xd6, 0xdc, 0x03, 0xb6, 0x14,
+                   0x7a, 0xef, 0xbd, 0x57, 0x57, 0x43, 0xf0, 0xf6,
+                   0xda, 0x4d, 0x86, 0x23, 0x50, 0x61, 0xb7, 0x1a,
+                   0xfd, 0x9c, 0xad, 0x2d, 0x34, 0x02, 0x5e, 0x56,
+                   0xac, 0x86, 0xb0, 0xf7, 0x74, 0x3e, 0xb3, 0x5e,
+                   0x1a, 0xcb, 0xca, 0x23, 0x78, 0x95, 0x42, 0x44,
+                   0x65, 0xb7, 0x06, 0xed, 0x22, 0x17, 0x5e, 0x57,
+                   0x18, 0xc8, 0xc7, 0x0b, 0x67, 0x03, 0xea, 0x8f,
+                   0x6b, 0x51, 0x0f, 0x94, 0x5b, 0xe4, 0x8e, 0x5a,
+                   0x36, 0xbb, 0x3c, 0x3c, 0x91, 0x73, 0x2b, 0x58,
+                   0x9d, 0xfc, 0x05, 0xd7, 0x2d, 0x80, 0x90, 0x31,
+                   0x94, 0x45, 0x2b, 0xda, 0x21, 0x34, 0x86, 0x47,
+                   0xec, 0x72, 0x94, 0x3f, 0x11, 0xa8, 0x46, 0xe6,
+                   0x2f, 0xae, 0xbe, 0x8e, 0xb5, 0x36, 0xb0, 0xfd},
+        .prime2_len = 128,
+        .exp1 = {0x76, 0xfe, 0x15, 0xf1, 0x8a, 0xe2, 0x39, 0xcd,
+                 0xf1, 0xdf, 0x6b, 0x44, 0x5c, 0xa4, 0xbc, 0x6b,
+                 0xb9, 0x68, 0xd7, 0x88, 0xc2, 0x19, 0x33, 0xa4,
+                 0xf5, 0xdc, 0xd2, 0x80, 0x03, 0x3d, 0x67, 0x12,
+                 0x06, 0x2c, 0xc0, 0x8a, 0x6d, 0xf2, 0x04, 0xc1,
+                 0xfb, 0xd0, 0xbe, 0x46, 0x30, 0x74, 0x43, 0xe6,
+                 0xdd, 0x4a, 0x64, 0x56, 0x37, 0x54, 0x29, 0xd4,
+                 0xe0, 0x38, 0xca, 0x25, 0x6f, 0xaf, 0x1c, 0x9b,
+                 0xde, 0x91, 0xc6, 0xb1, 0x7b, 0x76, 0xf8, 0x19,
+                 0x95, 0xf9, 0x1c, 0x48, 0xcb, 0xbe, 0xbc, 0x7b,
+                 0xf0, 0xe3, 0x49, 0x4c, 0x08, 0x35, 0x9e, 0x4e,
+                 0x8c, 0xd6, 0xa5, 0x87, 0xd7, 0xb9, 0x6d, 0x62,
+                 0x21, 0xfd, 0x7e, 0x0f, 0xb5, 0xc5, 0x57, 0x5f,
+                 0x08, 0x2e, 0xe5, 0x77, 0x69, 0x79, 0x80, 0x71,
+                 0xb2, 0xbb, 0xb4, 0xa3, 0x22, 0x38, 0x15, 0x1b,
+                 0x47, 0x31, 0x4b, 0xb6, 0x54, 0x79, 0x03, 0x11},
+        .exp1_len = 128,
+        .exp2 = {0x99, 0x88, 0x48, 0xb0, 0x55, 0x49, 0x9a, 0x10,
+                 0x09, 0xcb, 0xc7, 0xd2, 0x94, 0xb3, 0x6b, 0x1f,
+                 0xfd, 0xf2, 0x02, 0x0e, 0x6e, 0x73, 0x64, 0x05,
+                 0x3e, 0x94, 0xde, 0x1a, 0x00, 0x0d, 0xc9, 0x34,
+                 0x05, 0x87, 0xf7, 0xe2, 0x72, 0x76, 0xf6, 0x8c,
+                 0xdf, 0x60, 0x8d, 0x75, 0x3b, 0x63, 0x37, 0x7b,
+                 0x03, 0xb6, 0xf4, 0x08, 0x4d, 0x2c, 0x02, 0x7c,
+                 0x4b, 0x38, 0x96, 0x0a, 0x62, 0x33, 0xba, 0x9e,
+                 0xd9, 0x73, 0x8b, 0x76, 0xf1, 0x0e, 0xa7, 0x5b,
+                 0xe4, 0x56, 0x07, 0x8b, 0xf7, 0x01, 0xf6, 0x7c,
+                 0xc6, 0xb3, 0xf3, 0xfd, 0xc1, 0x86, 0xe6, 0x43,
+                 0x36, 0xc7, 0x6b, 0x37, 0x2e, 0x80, 0x91, 0x0e,
+                 0xc8, 0x0b, 0x0a, 0xdc, 0xc2, 0x3d, 0x02, 0xfb,
+                 0x9a, 0xe1, 0x04, 0x86, 0xa2, 0x82, 0x48, 0x07,
+                 0x5b, 0x4e, 0xa7, 0xe5, 0x6d, 0xdf, 0xcf, 0x38,
+                 0x82, 0xe4, 0x51, 0x56, 0x14, 0x71, 0xa2, 0x91},
+        .exp2_len = 128,
+        .coef = {0x64, 0x3b, 0xf7, 0x46, 0x42, 0x9f, 0x7d, 0x83,
+                 0x66, 0x7a, 0x06, 0x53, 0x02, 0x13, 0x47, 0xef,
+                 0xbf, 0xc0, 0x5e, 0x63, 0x51, 0xf8, 0x21, 0xa9,
+                 0xde, 0xbb, 0x60, 0xe0, 0xec, 0xcd, 0xe5, 0x00,
+                 0x5a, 0xd9, 0xe9, 0xec, 0x31, 0xe5, 0x58, 0xf7,
+                 0xe9, 0x2c, 0x29, 0x32, 0x8e, 0x74, 0x56, 0x9d,
+                 0x7c, 0xef, 0x7c, 0x74, 0xca, 0xbc, 0x2b, 0x35,
+                 0x5e, 0xd4, 0x01, 0xa1, 0xa0, 0x91, 0x4b, 0x4e,
+                 0x3c, 0xbb, 0x06, 0x48, 0x4e, 0x58, 0x19, 0x60,
+                 0x51, 0x16, 0x9e, 0xd1, 0x4c, 0xaa, 0x2e, 0xfa,
+                 0x6e, 0xa0, 0x44, 0xe0, 0x54, 0xd2, 0x61, 0x44,
+                 0xcc, 0x16, 0x29, 0xc5, 0x50, 0x10, 0x55, 0x8a,
+                 0x04, 0xe1, 0x33, 0xf4, 0x4b, 0x7c, 0x24, 0x4d,
+                 0xac, 0x25, 0xbf, 0x91, 0x3c, 0x57, 0xb8, 0x90,
+                 0xee, 0x49, 0xf5, 0x48, 0x25, 0x9c, 0xd6, 0x34,
+                 0x04, 0xfe, 0xf6, 0x85, 0x9d, 0xcf, 0x97, 0x5a},
+        .coef_len = 128,
+        // msg is encrypted message
+        .msg = {0x48, 0xcc, 0xea, 0xb1, 0x0f, 0x39, 0xa4, 0xdb,
+                0x32, 0xf6, 0x00, 0x74, 0xfe, 0xea, 0x47, 0x3c,
+                0xbc, 0xdb, 0x7a, 0xcc, 0xf9, 0x2e, 0x15, 0x04,
+                0x17, 0xf7, 0x6b, 0x44, 0x75, 0x6b, 0x19, 0x0e,
+                0x84, 0x3e, 0x79, 0xec, 0x12, 0xaa, 0x85, 0x08,
+                0x3a, 0x21, 0xf5, 0x43, 0x7e, 0x7b, 0xad, 0x0a,
+                0x60, 0x48, 0x2e, 0x60, 0x11, 0x98, 0xf9, 0xd8,
+                0x69, 0x23, 0x23, 0x9c, 0x87, 0x86, 0xee, 0x72,
+                0x82, 0x85, 0xaf, 0xd0, 0x93, 0x7f, 0x7d, 0xde,
+                0x12, 0x71, 0x7f, 0x28, 0x38, 0x98, 0x43, 0xd7,
+                0x37, 0x59, 0x12, 0xb0, 0x7b, 0x99, 0x1f, 0x4f,
+                0xdb, 0x01, 0x90, 0xfc, 0xed, 0x8b, 0xa6, 0x65,
+                0x31, 0x43, 0x67, 0xe8, 0xc5, 0xf9, 0xd2, 0x98,
+                0x1d, 0x0f, 0x51, 0x28, 0xfe, 0xeb, 0x46, 0xcb,
+                0x50, 0xfc, 0x23, 0x7e, 0x64, 0x43, 0x8a, 0x86,
+                0xdf, 0x19, 0x8d, 0xd0, 0x20, 0x93, 0x64, 0xae,
+                0x3a, 0x84, 0x2d, 0x77, 0x53, 0x2b, 0x66, 0xb7,
+                0xef, 0x26, 0x3b, 0x83, 0xb1, 0x54, 0x1e, 0xd6,
+                0x71, 0xb1, 0x20, 0xdf, 0xd6, 0x60, 0x46, 0x2e,
+                0x21, 0x07, 0xa4, 0xee, 0x7b, 0x96, 0x4e, 0x73,
+                0x4a, 0x7b, 0xd6, 0x8d, 0x90, 0xdd, 0xa6, 0x17,
+                0x70, 0x65, 0x8a, 0x3c, 0x24, 0x29, 0x48, 0x53,
+                0x2d, 0xa3, 0x26, 0x48, 0x68, 0x7e, 0x03, 0x18,
+                0x28, 0x64, 0x73, 0xf6, 0x75, 0xb4, 0x12, 0xd6,
+                0x46, 0x8f, 0x01, 0x3f, 0x14, 0xd7, 0x60, 0xa3,
+                0x58, 0xdf, 0xca, 0xd3, 0xcd, 0xa2, 0xaf, 0xee,
+                0xc5, 0xe2, 0x68, 0xa3, 0x7d, 0x25, 0x0c, 0x37,
+                0xf7, 0x22, 0xf4, 0x68, 0xa7, 0x0d, 0xfd, 0x92,
+                0xd7, 0x29, 0x4c, 0x3c, 0x1e, 0xe1, 0xe7, 0xf8,
+                0x84, 0x3b, 0x7d, 0x16, 0xf9, 0xf3, 0x7e, 0xf3,
+                0x57, 0x48, 0xc3, 0xae, 0x93, 0xaa, 0x15, 0x5c,
+                0xdc, 0xdf, 0xeb, 0x4e, 0x78, 0x56, 0x73, 0x03},
+        .msg_len = 256,
+        // sig is decrypted message
+        .sig = { 0x22, 0xd8, 0x50, 0x13, 0x7b, 0x9e, 0xeb, 0xe0,
+                 0x92, 0xb2, 0x4f, 0x60, 0x2d, 0xc5, 0xbb, 0x79,
+                 0x18, 0xc1, 0x6b, 0xd8, 0x9d, 0xdb, 0xf2, 0x04,
+                 0x67, 0xb1, 0x19, 0xd2, 0x05, 0xf9, 0xc2, 0xe4,
+                 0xbd, 0x7d, 0x25, 0x92, 0xcf, 0x1e, 0x53, 0x21,
+                 0x06, 0xe0, 0xf3, 0x35, 0x57, 0x56, 0x59, 0x23,
+                 0xc7, 0x3a, 0x02, 0xd4, 0xf0, 0x9c, 0x0c, 0x22,
+                 0xbe, 0xa8, 0x91, 0x48, 0x18, 0x3e, 0x60, 0x31,
+                 0x7f, 0x70, 0x28, 0xb3, 0xaa, 0x1f, 0x26, 0x1f,
+                 0x91, 0xc9, 0x79, 0x39, 0x31, 0x01, 0xd7, 0xe1,
+                 0x5f, 0x40, 0x67, 0xe6, 0x39, 0x79, 0xb3, 0x27,
+                 0x51, 0x65, 0x8e, 0xf7, 0x69, 0x61, 0x0f, 0xe9,
+                 0x7c, 0xf9, 0xce, 0xf3, 0x27, 0x8b, 0x31, 0x17,
+                 0xd3, 0x84, 0x05, 0x1c, 0x3b, 0x1d, 0x82, 0xc2,
+                 0x51, 0xc2, 0x30, 0x54, 0x18, 0xc8, 0xf6, 0x84,
+                 0x05, 0x30, 0xe6, 0x31, 0xaa, 0xd6, 0x3e, 0x70,
+                 0xe2, 0x0e, 0x02, 0x5b, 0xcd, 0x8e, 0xfb, 0x54,
+                 0xc9, 0x2e, 0xc6, 0xd3, 0xb1, 0x06, 0xa2, 0xf8,
+                 0xe6, 0x4e, 0xef, 0xf7, 0xd3, 0x84, 0x95, 0xb0,
+                 0xfc, 0x50, 0xc9, 0x71, 0x38, 0xaf, 0x4b, 0x1c,
+                 0x0a, 0x67, 0xa1, 0xc4, 0xe2, 0x7b, 0x07, 0x7b,
+                 0x84, 0x39, 0x33, 0x2e, 0xdf, 0xa8, 0x60, 0x8d,
+                 0xfe, 0xae, 0x65, 0x3c, 0xd6, 0xa6, 0x28, 0xac,
+                 0x55, 0x03, 0x95, 0xf7, 0xe7, 0x43, 0x90, 0xe4,
+                 0x2c, 0x11, 0x68, 0x22, 0x34, 0x87, 0x09, 0x25,
+                 0xee, 0xaa, 0x1f, 0xa7, 0x1b, 0x76, 0xcf, 0x1f,
+                 0x2e, 0xe3, 0xbd, 0xa6, 0x9f, 0x67, 0x17, 0x03,
+                 0x3f, 0xf8, 0xb7, 0xc9, 0x5c, 0x97, 0x99, 0xe7,
+                 0xa3, 0xbe, 0xa5, 0xe7, 0xe4, 0xa1, 0xc3, 0x59,
+                 0x77, 0x2f, 0xb6, 0xb1, 0xc6, 0xe6, 0xc5, 0x16,
+                 0x66, 0x1d, 0xfe, 0x30, 0xc3},
+        .sig_len = 245,
+    },
+    {                           // 3 bad, prf
+        .mod = {0xc8, 0xcc, 0x83, 0x97, 0x14, 0x09, 0x8d, 0xa5,
+                0x6c, 0xaa, 0x23, 0x64, 0x0f, 0x93, 0xdc, 0x89,
+                0x97, 0xc1, 0x63, 0x72, 0x96, 0x8f, 0xc1, 0xb0,
+                0xc6, 0xdf, 0x51, 0x13, 0xc1, 0xc9, 0x4e, 0x8b,
+                0x21, 0xe4, 0x8a, 0xd2, 0x29, 0x7e, 0x65, 0x41,
+                0x90, 0x11, 0xb4, 0xe6, 0xd8, 0xf5, 0xe7, 0x3b,
+                0x1b, 0x78, 0xb2, 0x57, 0x40, 0x03, 0x21, 0xd1,
+                0xef, 0x6b, 0x60, 0x2d, 0x4e, 0xc8, 0xce, 0x8d,
+                0x14, 0x1c, 0x94, 0x90, 0x5e, 0xb4, 0xad, 0x30,
+                0x66, 0x39, 0xa4, 0x92, 0x06, 0x53, 0x4b, 0x6e,
+                0x7f, 0x26, 0x07, 0x42, 0x3e, 0x97, 0xdf, 0xfd,
+                0x13, 0x3c, 0x88, 0xd7, 0x21, 0x39, 0x9d, 0xef,
+                0xbc, 0x7e, 0x96, 0xcc, 0xdc, 0xbd, 0x7f, 0x3a,
+                0xae, 0x1f, 0xe8, 0x92, 0x71, 0x2b, 0xfb, 0x49,
+                0x29, 0x81, 0x7d, 0x51, 0x16, 0x66, 0x44, 0x0a,
+                0x1f, 0xac, 0xb7, 0xa2, 0x08, 0xf5, 0xea, 0x16,
+                0x59, 0x10, 0xad, 0xd8, 0xa3, 0xf2, 0xd4, 0x97,
+                0x20, 0x23, 0x60, 0xcc, 0xb6, 0x32, 0x02, 0x4f,
+                0x0d, 0x07, 0x16, 0x9c, 0x19, 0x18, 0xf3, 0x16,
+                0xf7, 0x94, 0xb1, 0x43, 0xae, 0xf5, 0x4e, 0xc8,
+                0x75, 0x22, 0xa4, 0xc0, 0x29, 0x78, 0xf9, 0x68,
+                0x99, 0x80, 0xbf, 0xfb, 0xf6, 0x49, 0xc3, 0x07,
+                0xe8, 0x18, 0x19, 0xbf, 0xf8, 0x84, 0x09, 0x63,
+                0x8d, 0x48, 0xbd, 0x94, 0xbe, 0x15, 0x2b, 0x59,
+                0xff, 0x64, 0x9f, 0xa0, 0xbd, 0x62, 0x9d, 0x0f,
+                0xfa, 0x18, 0x13, 0xc3, 0xab, 0xf4, 0xb5, 0x6b,
+                0xd3, 0xc2, 0xea, 0x54, 0x65, 0xdf, 0xfa, 0x14,
+                0x58, 0x92, 0x92, 0xa9, 0xd8, 0xa2, 0x4a, 0xd2,
+                0x6b, 0xe7, 0xee, 0x05, 0x10, 0x74, 0x1b, 0x63,
+                0x82, 0xd4, 0x3c, 0x83, 0xd5, 0xbf, 0xa4, 0x0a,
+                0x46, 0x61, 0x3d, 0x06, 0x2b, 0xe4, 0x45, 0x51,
+                0x7d, 0xbc, 0xaf, 0x0c, 0xb4, 0xe1, 0xa7, 0x69},
+        .mod_len = 256,
+        .pub_exp = {0x01, 0x00, 0x01},
+        .pubexp_len = 3,
+        .priv_exp = {0x14, 0x55, 0x01, 0x0e, 0x0f, 0x2d, 0x58, 0x76,
+                     0x63, 0xa6, 0x66, 0xa6, 0xff, 0x1c, 0xcd, 0xbb,
+                     0xf0, 0xed, 0xd8, 0x10, 0x06, 0x46, 0xd0, 0x2a,
+                     0x02, 0x39, 0x22, 0x90, 0x89, 0x92, 0xc4, 0xad,
+                     0x39, 0xe5, 0x56, 0x59, 0x29, 0x72, 0x6e, 0xf6,
+                     0x50, 0x8c, 0x3a, 0x71, 0x15, 0x8e, 0xf0, 0xb6,
+                     0xff, 0x75, 0x1d, 0x39, 0xd0, 0x75, 0x80, 0xbb,
+                     0x2d, 0x2f, 0x06, 0x32, 0x10, 0x44, 0x2d, 0x06,
+                     0x03, 0xff, 0x50, 0xdb, 0xbd, 0x7b, 0x35, 0xfe,
+                     0x2c, 0x9b, 0xb1, 0x9a, 0x47, 0xa1, 0xaf, 0x85,
+                     0xa4, 0xc2, 0x49, 0x01, 0xe0, 0x2c, 0xa8, 0xb5,
+                     0x8b, 0x79, 0x19, 0xb2, 0x0e, 0xdf, 0x32, 0xaa,
+                     0xcf, 0xbf, 0x51, 0xad, 0xb4, 0xbc, 0x4b, 0x61,
+                     0xb9, 0xb7, 0xe9, 0x68, 0xca, 0xa4, 0xd5, 0x70,
+                     0xf7, 0x0e, 0xf1, 0x8d, 0x80, 0x63, 0x22, 0x88,
+                     0x93, 0xe4, 0x7d, 0x43, 0x9e, 0xfc, 0xa7, 0x93,
+                     0x25, 0x9b, 0xcf, 0x2c, 0xd1, 0x08, 0xa3, 0xd8,
+                     0x68, 0x8c, 0xdf, 0x07, 0x8e, 0x7a, 0xc7, 0x99,
+                     0x96, 0x9f, 0x23, 0x39, 0xd2, 0xc1, 0xf5, 0x22,
+                     0xb9, 0x69, 0x68, 0x46, 0x29, 0xa9, 0x33, 0xba,
+                     0xae, 0xc2, 0x68, 0x16, 0x25, 0xea, 0xb8, 0x4f,
+                     0x4e, 0x56, 0xf4, 0x44, 0x7e, 0x9d, 0x88, 0xfb,
+                     0x9a, 0x19, 0x9c, 0xf7, 0x10, 0x23, 0xe0, 0xe2,
+                     0x57, 0xb1, 0x44, 0x41, 0xb3, 0x3c, 0x84, 0xd3,
+                     0xbc, 0x67, 0xca, 0x80, 0x31, 0xd2, 0x61, 0x26,
+                     0x18, 0x10, 0x3a, 0x7a, 0x0a, 0x40, 0x84, 0x42,
+                     0x62, 0xf7, 0x5d, 0x88, 0x90, 0xcd, 0x61, 0x6e,
+                     0x51, 0xf9, 0x03, 0x54, 0x88, 0xfd, 0x6e, 0x09,
+                     0x9d, 0xe8, 0xff, 0x6d, 0x65, 0xa4, 0xff, 0x11,
+                     0x82, 0x54, 0x80, 0x7c, 0x9f, 0x58, 0xd2, 0xfb,
+                     0xba, 0x8b, 0xa1, 0x51, 0xdc, 0x8c, 0x68, 0xbe,
+                     0x34, 0x9c, 0x97, 0x7a, 0x20, 0x4e, 0x04, 0xc1},
+        .privexp_len = 256,
+        .prime1 = {0xf8, 0xf5, 0xad, 0x6b, 0xa8, 0x28, 0x93, 0x1b,
+                   0xea, 0x45, 0x9b, 0x8a, 0x3f, 0x6d, 0xc0, 0x41,
+                   0xd2, 0x34, 0x82, 0x40, 0x9c, 0x25, 0x71, 0xe9,
+                   0x63, 0xf3, 0x1f, 0x74, 0x86, 0x02, 0xa2, 0x56,
+                   0x37, 0x1b, 0x38, 0x83, 0xed, 0x45, 0x9e, 0xcf,
+                   0x97, 0x05, 0x26, 0x45, 0x9e, 0xdd, 0x16, 0xe0,
+                   0x55, 0x22, 0xf5, 0xa4, 0x5d, 0x94, 0x75, 0x1b,
+                   0x2e, 0xc2, 0xda, 0xf2, 0x72, 0xc7, 0xf8, 0x81,
+                   0x6a, 0x52, 0xc0, 0x0d, 0x18, 0x08, 0x01, 0x71,
+                   0x63, 0x4d, 0xa8, 0x99, 0xd7, 0x97, 0x32, 0x22,
+                   0xf5, 0x1b, 0x93, 0x76, 0x30, 0x54, 0x86, 0x96,
+                   0xa9, 0xf7, 0xd8, 0xc2, 0x4a, 0x59, 0x49, 0x7c,
+                   0x1e, 0xfc, 0xd4, 0x55, 0xcf, 0xb9, 0x7e, 0xe8,
+                   0x6d, 0x2b, 0x6d, 0x34, 0x97, 0x2b, 0x33, 0x2f,
+                   0xda, 0x30, 0x3f, 0x04, 0x99, 0x9b, 0x4e, 0xb6,
+                   0xb5, 0xcc, 0x0b, 0xb3, 0x3e, 0x77, 0x61, 0xdd},
+        .prime1_len = 128,
+        .prime2 = {0xce, 0x7a, 0x2e, 0x3b, 0x49, 0xa9, 0x0b, 0x96,
+                   0x33, 0x0a, 0x12, 0xdc, 0x68, 0x2b, 0xdf, 0xbd,
+                   0xfb, 0xae, 0x8d, 0xd6, 0xdc, 0x03, 0xb6, 0x14,
+                   0x7a, 0xef, 0xbd, 0x57, 0x57, 0x43, 0xf0, 0xf6,
+                   0xda, 0x4d, 0x86, 0x23, 0x50, 0x61, 0xb7, 0x1a,
+                   0xfd, 0x9c, 0xad, 0x2d, 0x34, 0x02, 0x5e, 0x56,
+                   0xac, 0x86, 0xb0, 0xf7, 0x74, 0x3e, 0xb3, 0x5e,
+                   0x1a, 0xcb, 0xca, 0x23, 0x78, 0x95, 0x42, 0x44,
+                   0x65, 0xb7, 0x06, 0xed, 0x22, 0x17, 0x5e, 0x57,
+                   0x18, 0xc8, 0xc7, 0x0b, 0x67, 0x03, 0xea, 0x8f,
+                   0x6b, 0x51, 0x0f, 0x94, 0x5b, 0xe4, 0x8e, 0x5a,
+                   0x36, 0xbb, 0x3c, 0x3c, 0x91, 0x73, 0x2b, 0x58,
+                   0x9d, 0xfc, 0x05, 0xd7, 0x2d, 0x80, 0x90, 0x31,
+                   0x94, 0x45, 0x2b, 0xda, 0x21, 0x34, 0x86, 0x47,
+                   0xec, 0x72, 0x94, 0x3f, 0x11, 0xa8, 0x46, 0xe6,
+                   0x2f, 0xae, 0xbe, 0x8e, 0xb5, 0x36, 0xb0, 0xfd},
+        .prime2_len = 128,
+        .exp1 = {0x76, 0xfe, 0x15, 0xf1, 0x8a, 0xe2, 0x39, 0xcd,
+                 0xf1, 0xdf, 0x6b, 0x44, 0x5c, 0xa4, 0xbc, 0x6b,
+                 0xb9, 0x68, 0xd7, 0x88, 0xc2, 0x19, 0x33, 0xa4,
+                 0xf5, 0xdc, 0xd2, 0x80, 0x03, 0x3d, 0x67, 0x12,
+                 0x06, 0x2c, 0xc0, 0x8a, 0x6d, 0xf2, 0x04, 0xc1,
+                 0xfb, 0xd0, 0xbe, 0x46, 0x30, 0x74, 0x43, 0xe6,
+                 0xdd, 0x4a, 0x64, 0x56, 0x37, 0x54, 0x29, 0xd4,
+                 0xe0, 0x38, 0xca, 0x25, 0x6f, 0xaf, 0x1c, 0x9b,
+                 0xde, 0x91, 0xc6, 0xb1, 0x7b, 0x76, 0xf8, 0x19,
+                 0x95, 0xf9, 0x1c, 0x48, 0xcb, 0xbe, 0xbc, 0x7b,
+                 0xf0, 0xe3, 0x49, 0x4c, 0x08, 0x35, 0x9e, 0x4e,
+                 0x8c, 0xd6, 0xa5, 0x87, 0xd7, 0xb9, 0x6d, 0x62,
+                 0x21, 0xfd, 0x7e, 0x0f, 0xb5, 0xc5, 0x57, 0x5f,
+                 0x08, 0x2e, 0xe5, 0x77, 0x69, 0x79, 0x80, 0x71,
+                 0xb2, 0xbb, 0xb4, 0xa3, 0x22, 0x38, 0x15, 0x1b,
+                 0x47, 0x31, 0x4b, 0xb6, 0x54, 0x79, 0x03, 0x11},
+        .exp1_len = 128,
+        .exp2 = {0x99, 0x88, 0x48, 0xb0, 0x55, 0x49, 0x9a, 0x10,
+                 0x09, 0xcb, 0xc7, 0xd2, 0x94, 0xb3, 0x6b, 0x1f,
+                 0xfd, 0xf2, 0x02, 0x0e, 0x6e, 0x73, 0x64, 0x05,
+                 0x3e, 0x94, 0xde, 0x1a, 0x00, 0x0d, 0xc9, 0x34,
+                 0x05, 0x87, 0xf7, 0xe2, 0x72, 0x76, 0xf6, 0x8c,
+                 0xdf, 0x60, 0x8d, 0x75, 0x3b, 0x63, 0x37, 0x7b,
+                 0x03, 0xb6, 0xf4, 0x08, 0x4d, 0x2c, 0x02, 0x7c,
+                 0x4b, 0x38, 0x96, 0x0a, 0x62, 0x33, 0xba, 0x9e,
+                 0xd9, 0x73, 0x8b, 0x76, 0xf1, 0x0e, 0xa7, 0x5b,
+                 0xe4, 0x56, 0x07, 0x8b, 0xf7, 0x01, 0xf6, 0x7c,
+                 0xc6, 0xb3, 0xf3, 0xfd, 0xc1, 0x86, 0xe6, 0x43,
+                 0x36, 0xc7, 0x6b, 0x37, 0x2e, 0x80, 0x91, 0x0e,
+                 0xc8, 0x0b, 0x0a, 0xdc, 0xc2, 0x3d, 0x02, 0xfb,
+                 0x9a, 0xe1, 0x04, 0x86, 0xa2, 0x82, 0x48, 0x07,
+                 0x5b, 0x4e, 0xa7, 0xe5, 0x6d, 0xdf, 0xcf, 0x38,
+                 0x82, 0xe4, 0x51, 0x56, 0x14, 0x71, 0xa2, 0x91},
+        .exp2_len = 128,
+        .coef = {0x64, 0x3b, 0xf7, 0x46, 0x42, 0x9f, 0x7d, 0x83,
+                 0x66, 0x7a, 0x06, 0x53, 0x02, 0x13, 0x47, 0xef,
+                 0xbf, 0xc0, 0x5e, 0x63, 0x51, 0xf8, 0x21, 0xa9,
+                 0xde, 0xbb, 0x60, 0xe0, 0xec, 0xcd, 0xe5, 0x00,
+                 0x5a, 0xd9, 0xe9, 0xec, 0x31, 0xe5, 0x58, 0xf7,
+                 0xe9, 0x2c, 0x29, 0x32, 0x8e, 0x74, 0x56, 0x9d,
+                 0x7c, 0xef, 0x7c, 0x74, 0xca, 0xbc, 0x2b, 0x35,
+                 0x5e, 0xd4, 0x01, 0xa1, 0xa0, 0x91, 0x4b, 0x4e,
+                 0x3c, 0xbb, 0x06, 0x48, 0x4e, 0x58, 0x19, 0x60,
+                 0x51, 0x16, 0x9e, 0xd1, 0x4c, 0xaa, 0x2e, 0xfa,
+                 0x6e, 0xa0, 0x44, 0xe0, 0x54, 0xd2, 0x61, 0x44,
+                 0xcc, 0x16, 0x29, 0xc5, 0x50, 0x10, 0x55, 0x8a,
+                 0x04, 0xe1, 0x33, 0xf4, 0x4b, 0x7c, 0x24, 0x4d,
+                 0xac, 0x25, 0xbf, 0x91, 0x3c, 0x57, 0xb8, 0x90,
+                 0xee, 0x49, 0xf5, 0x48, 0x25, 0x9c, 0xd6, 0x34,
+                 0x04, 0xfe, 0xf6, 0x85, 0x9d, 0xcf, 0x97, 0x5a},
+        .coef_len = 128,
+        // msg is encrypted message
+        .msg = {0x14, 0x39, 0xe0, 0x8c, 0x3f, 0x84, 0xc1, 0xa7,
+                0xfe, 0xc7, 0x4c, 0xe0, 0x76, 0x14, 0xb2, 0x0e,
+                0x01, 0xf6, 0xfa, 0x4e, 0x8c, 0x2a, 0x6c, 0xff,
+                0xdc, 0x35, 0x20, 0xd8, 0x88, 0x9e, 0x5d, 0x9a,
+                0x95, 0x0c, 0x64, 0x25, 0x79, 0x8f, 0x85, 0xd4,
+                0xbe, 0x38, 0xd3, 0x00, 0xea, 0x56, 0x95, 0xf1,
+                0x3e, 0xcd, 0x4c, 0xb3, 0x89, 0xd1, 0xff, 0x5b,
+                0x82, 0x48, 0x4b, 0x49, 0x4d, 0x62, 0x80, 0xab,
+                0x7f, 0xa7, 0x8e, 0x64, 0x59, 0x33, 0x98, 0x1c,
+                0xb9, 0x34, 0xcc, 0xe8, 0xbf, 0xcd, 0x11, 0x4c,
+                0xc0, 0xe6, 0x81, 0x1e, 0xef, 0xa4, 0x7a, 0xae,
+                0x20, 0xaf, 0x63, 0x8a, 0x1c, 0xd1, 0x63, 0xd2,
+                0xd3, 0x36, 0x61, 0x86, 0xd0, 0xa0, 0x7d, 0xf0,
+                0xc8, 0x1f, 0x6c, 0x9f, 0x31, 0x71, 0xcf, 0x35,
+                0x61, 0x47, 0x2e, 0x98, 0xa6, 0x00, 0x6b, 0xf7,
+                0x5d, 0xdb, 0x45, 0x7b, 0xed, 0x03, 0x6d, 0xcc,
+                0xe1, 0x99, 0x36, 0x9d, 0xe7, 0xd9, 0x4e, 0xf2,
+                0xc6, 0x8e, 0x84, 0x67, 0xee, 0x06, 0x04, 0xee,
+                0xa2, 0xb3, 0x00, 0x94, 0x79, 0x16, 0x2a, 0x78,
+                0x91, 0xba, 0x5c, 0x40, 0xca, 0xb1, 0x7f, 0x49,
+                0xe1, 0xc4, 0x38, 0xcb, 0x6e, 0xae, 0xa4, 0xf7,
+                0x6c, 0xe2, 0x3c, 0xce, 0x0e, 0x48, 0x3f, 0xf0,
+                0xe9, 0x6f, 0xa7, 0x90, 0xea, 0x15, 0xbe, 0x67,
+                0x67, 0x18, 0x14, 0x34, 0x2d, 0x0a, 0x23, 0xf4,
+                0xa2, 0x02, 0x62, 0xb6, 0x18, 0x2e, 0x72, 0xf3,
+                0xa6, 0x7c, 0xd2, 0x89, 0x71, 0x15, 0x03, 0xc8,
+                0x55, 0x16, 0xa9, 0xed, 0x22, 0x54, 0x22, 0xf9,
+                0x8b, 0x11, 0x6f, 0x1a, 0xb0, 0x80, 0xa8, 0x0a,
+                0xbd, 0x6f, 0x02, 0x16, 0xdf, 0x88, 0xd8, 0xcf,
+                0xd6, 0x7c, 0x13, 0x92, 0x43, 0xbe, 0x8d, 0xd7,
+                0x85, 0x02, 0xa7, 0xaa, 0xf6, 0xbc, 0x99, 0xd7,
+                0xda, 0x71, 0xbc, 0xdf, 0x62, 0x7e, 0x73, 0x54},
+        .msg_len = 256,
+        // sig is decrypted message
+        .sig = { 0x0f, 0x9b},
+        .sig_len = 2,
+    },
+};
+
+#define NUM_OF_IMPLICIT_REJECTION_TESTSUITES 1
+struct PUBLISHED_TEST_SUITE_INFO rsa_implicit_rejection_test_suites[] = {
+    {
+     .name = "RSA PKCS v1.5",
+     .tvcount = 4,
+     .tv = rsa_imp_rejection_tv,
+     .mech = {CKM_RSA_PKCS, 0, 0},
+     },
+};
diff --git a/testcases/crypto/rsa_func.c b/testcases/crypto/rsa_func.c
index d9f4ebaf..cb7bf491 100644
--- a/testcases/crypto/rsa_func.c
+++ b/testcases/crypto/rsa_func.c
@@ -1963,6 +1963,164 @@ testcase_cleanup:
     return rc;
 }
 
+CK_RV do_RSAImplicitRejection(struct PUBLISHED_TEST_SUITE_INFO *tsuite)
+{
+    unsigned int i;
+    CK_BYTE decrypt[BIG_REQUEST];
+    CK_ULONG decrypt_len;
+    CK_MECHANISM mech;
+    CK_OBJECT_HANDLE priv_key = CK_INVALID_HANDLE;
+    CK_SLOT_ID slot_id = SLOT_ID;
+    CK_SESSION_HANDLE session;
+    CK_FLAGS flags;
+    CK_BYTE user_pin[PKCS11_MAX_PIN_LEN];
+    CK_ULONG user_pin_len;
+    CK_RV rc, loc_rc;
+
+    char *s;
+
+    // begin testsuite
+    testsuite_begin("%s Implicit Rejection.", tsuite->name);
+    testcase_rw_session();
+    testcase_user_login();
+
+    if (!is_ica_token(slot_id) && !is_soft_token(slot_id)) {
+        testsuite_skip(tsuite->tvcount,
+                       "Slot %u doesn't support Implicit Rejection",
+                       (unsigned int) slot_id);
+        goto testcase_cleanup;
+    }
+    // skip tests if the slot doesn't support this mechanism
+    if (!mech_supported(slot_id, tsuite->mech.mechanism)) {
+        testsuite_skip(tsuite->tvcount,
+                       "Slot %u doesn't support %s (0x%x)",
+                       (unsigned int) slot_id,
+                       mech_to_str(tsuite->mech.mechanism),
+                       (unsigned int) tsuite->mech.mechanism);
+        goto testcase_cleanup;
+    }
+
+    // iterate over test vectors
+    for (i = 0; i < tsuite->tvcount; i++) {
+
+        // get public exponent from test vector
+        if (p11_ahex_dump(&s, tsuite->tv[i].pub_exp,
+                          tsuite->tv[i].pubexp_len) == NULL) {
+            testcase_error("p11_ahex_dump() failed");
+            rc = -1;
+            goto testcase_cleanup;
+        }
+        // begin testcase
+        testcase_begin("%s Implicit Rejection with test vector %u."
+                       "\npubl_exp='%s', modbits=%lu, publ_exp_len=%lu.",
+                       tsuite->name, i, s,
+                       tsuite->tv[i].mod_len * 8,
+                       tsuite->tv[i].pubexp_len);
+
+        rc = CKR_OK;
+
+        if (!keysize_supported(slot_id, tsuite->mech.mechanism,
+                               tsuite->tv[i].mod_len * 8)) {
+            testcase_skip("Token in slot %lu cannot be used with modbits='%lu'",
+                          SLOT_ID, tsuite->tv[i].mod_len * 8);
+            free(s);
+            continue;
+        }
+
+        free(s);
+
+        // clear buffers
+        memset(decrypt, 0, BIG_REQUEST);
+
+        // create (private) key handle
+        rc = create_RSAPrivateKey(session,
+                                  tsuite->tv[i].mod,
+                                  tsuite->tv[i].pub_exp,
+                                  tsuite->tv[i].priv_exp,
+                                  tsuite->tv[i].prime1,
+                                  tsuite->tv[i].prime2,
+                                  tsuite->tv[i].exp1,
+                                  tsuite->tv[i].exp2,
+                                  tsuite->tv[i].coef,
+                                  tsuite->tv[i].mod_len,
+                                  tsuite->tv[i].pubexp_len,
+                                  tsuite->tv[i].privexp_len,
+                                  tsuite->tv[i].prime1_len,
+                                  tsuite->tv[i].prime2_len,
+                                  tsuite->tv[i].exp1_len,
+                                  tsuite->tv[i].exp2_len,
+                                  tsuite->tv[i].coef_len, &priv_key);
+        if (rc != CKR_OK) {
+            if (rc == CKR_POLICY_VIOLATION) {
+                testcase_skip("RSA key import is not allowed by policy");
+                continue;
+            }
+
+            testcase_error("create_RSAPrivateKey(), rc=%s", p11_get_ckr(rc));
+            goto error;
+        }
+
+        // set cipher buffer length
+        decrypt_len = BIG_REQUEST;
+
+        // get mech
+        mech = tsuite->mech;
+
+        // initialize (private key) decryption
+        rc = funcs->C_DecryptInit(session, &mech, priv_key);
+        if (rc != CKR_OK) {
+            testcase_error("C_DecryptInit, rc=%s", p11_get_ckr(rc));
+            goto tv_cleanup;
+        }
+        // do (private key) decryption
+        rc = funcs->C_Decrypt(session, tsuite->tv[i].msg, tsuite->tv[i].msg_len,
+                              decrypt, &decrypt_len);
+        if (rc != CKR_OK) {
+            testcase_error("C_Decrypt, rc=%s", p11_get_ckr(rc));
+            goto tv_cleanup;
+        }
+
+        // check results
+        testcase_new_assertion();
+
+        if (decrypt_len != tsuite->tv[i].sig_len) {
+            testcase_fail("decrypted length does not match"
+                          "expected data length.\n expected length = %lu, "
+                          "but found length=%lu.\n",
+                          tsuite->tv[i].sig_len, decrypt_len);
+        } else if (memcmp(decrypt, tsuite->tv[i].sig, tsuite->tv[i].sig_len)) {
+            testcase_fail("decrypted data does not match expected data.");
+        } else {
+            testcase_pass("Implicit Rejection.");
+        }
+
+        // clean up
+tv_cleanup:
+
+        rc = funcs->C_DestroyObject(session, priv_key);
+        if (rc != CKR_OK) {
+            testcase_error("C_DestroyObject(), rc=%s.", p11_get_ckr(rc));
+            goto error;
+        }
+    }
+
+    goto testcase_cleanup;
+error:
+    loc_rc = funcs->C_DestroyObject(session, priv_key);
+    if (loc_rc != CKR_OK) {
+        testcase_error("C_DestroyObject(), rc=%s.", p11_get_ckr(loc_rc));
+    }
+
+testcase_cleanup:
+    testcase_user_logout();
+    loc_rc = funcs->C_CloseAllSessions(slot_id);
+    if (loc_rc != CKR_OK) {
+        testcase_error("C_CloseAllSessions, rc=%s", p11_get_ckr(loc_rc));
+    }
+
+    return rc;
+}
+
 CK_RV rsa_funcs(void)
 {
     unsigned int i;
@@ -2032,6 +2190,13 @@ CK_RV rsa_funcs(void)
             break;
     }
 
+    // Implicit rejection tests
+    for (i = 0; i < NUM_OF_IMPLICIT_REJECTION_TESTSUITES; i++) {
+        rv = do_RSAImplicitRejection(&rsa_implicit_rejection_test_suites[i]);
+        if (rv != CKR_OK && (!no_stop))
+            break;
+    }
+
     return rv;
 }
 
